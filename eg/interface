#!perl
use strict;
use warnings;
use lib qw(lib t/lib);

use Data::Dumper;
use JSON 2;
use PTest::File;
use PTest::Dir;
use Prism::Util -all;

my $JSON = JSON->new->ascii->pretty->convert_blessed->allow_blessed;

my %map = (
  file => 'PTest::File',
  dir  => 'PTest::Dir',
);

sub getline {
  my $line = <STDIN>;
  die "\nERROR: input stream terminated\n" unless defined $line;
  chomp $line;
  return $line;
}

$|++;
printf "BUILDING UP /type/ident/subsystem/method\n\n";

my ($class);
TYPE: while (1) {
  printf "ENTER TYPE (%s)\n> ", join(q{, }, sort keys %map);
  my $type = getline;

  last TYPE if $class = $map{ $type };
  warn "ERROR: invalid type\n\n"
}

print "ENTER IDENT\n> ";
my $ident = getline;

my $obj = obj($class)->coerce($ident);

my @managers = grep { s/_mgr\z// } $class->meta->get_all_method_names;

my ($mgr);
SUBSYSTEM: while (1) {
  printf "ENTER SUBSYSTEM (%s)\n> ", join(q{, }, sort @managers);
  my $subsystem = getline;

  if (grep { $_ eq $subsystem } @managers) {
    my $method = "$subsystem\_mgr";
    $mgr = $obj->$method;
    last SUBSYSTEM;
  }

  warn "ERRRO: invalid subsytem\n\n"
}

my %method = map  { $_->name => $_ }
             grep { $_->isa('Prism::Publisher::PublishedMethod') }
             $mgr->meta->get_all_methods;

my ($mgr_method, $method);
MGR_METHOD: while (1) {
  printf "ENTER METHOD (%s)\n> ", join(q{, }, sort keys %method);
  $mgr_method = getline;

  last MGR_METHOD if $method = $method{ $mgr_method };
  warn "ERROR: invalid method\n\n";
}

my $signature = $method->signature;

my %arg;
for my $key (keys %$signature) {
  my $type = $signature->{$key};
  print "$key ($type)> ";
  $arg{ $key } = getline;
}

my $rv = $mgr->$mgr_method(\%arg);

my $pack = ppack($rv);
print "=== result: Raw Perl ======\n";
print Data::Dumper::Dumper($rv);
print "=== result: Packed JSON ===\n";
print $JSON->encode( $pack );
